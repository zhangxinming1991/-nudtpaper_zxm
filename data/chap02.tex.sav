\chapter{相关原理分析}
在本章中，将针对本文涉及的关键技术的原理进行分析和解读，这些关键技术是指导本文工作开展的理论支撑，只有把这些技术原理充分理解后，才能解决设计过程中遇到的难题，才能进行一系列的优化工作。这些技术原理包括，图像表示原理，SIFT算法原理，spark内存技术原理，spark任务调度原理，spark 性能优化原理以及HDFS存储原理。
\section{图像表示原理}
数字图像可以理解为对二维函数$f(x,y)$进行采用和量化后得到的图像，因此，通常用二维矩阵来表示一幅数字图像，矩阵中每一个值代表图像中的一个像素。在现实生活中，我们看到的大多数图像都是彩色的，在彩色图片中，每个像素由R,G,B三个分量组成，每个分量的取值为0～255（0表示最暗，255 表示最亮）。但是在图像处理中大多数用的都是灰度图像，灰度图像是R、G、B三个分量灰度值相同的一种特殊图像。处理中使用灰度图像的原因在于它会使后续的处理时的计算量变得相对很少，并且灰度图像对图像特征的描述与彩色图像没有什么区别，RGB只是从光学的原理上对颜色进行了调配。因此灰度图像仍然能反应整个图像的整体和局部的亮度和色度特征。本文的设计工作就是建立在灰度图像之后，我们将原始的图片都进行了灰度化处理，后续的所有处理都在此基础上进行。

灰度图像的每个像素用一个字节保存，对RGB图像进行灰度化，是对图像中RGB三个分量进行加权平均得到最终的灰度值，加权公式~\ref{jiaquan}所示：
\begin{equation}\label{jiaquan}
 Gray = 0.11B + 0.59G + 0.3R
\end{equation}

理解好基础的图像原理，是Spark下图像基础库SparkImgLib实现的理论指导。
\section{SIFT算法原理}
\label{sec:sift}
在本小节中，将会对SIFT算法进行详细分析，它是Spark下特征提取系统的最核心算法。

SIFT是一种检测并提取图像局部特征的算法，该算法在空间尺度中寻找极值点，并且提取出其位置、尺度、旋转不变量等信息。它的基本特点如下：
\begin{itemize}
\item 局部不变性好。局部特征对旋转，尺度缩放，亮度变化保持不变性，对视角变化，放射变换，噪声也有一定程度的稳定性。
\item 特征信息丰富。算法采用128维向量表示一个特征，基本可以达到准确匹配的效果。
\item 可扩展性强。可以很方便的与其他形式的特征向量进行联合。
\end{itemize}

SIFT算法大体可以划分为5个步骤，分别是高斯塔建立，高斯差分塔建立，极点检测，消除边缘响应，关键点方向的分配和描述，接下来，将会对这几个步骤进行分析：
\begin{compactenum}
\item 高斯塔建立\\图像高斯金子塔是将原始图像不断降阶采用，得到的一系列的大小不一的图像，由大到小，从下到上构成的塔状模型。原图像为金子塔的第一层，每次降采样所得到的新图像为金字塔的一层(每层一张图像)，每个金字塔共n 层。为了让尺度体现其连续性，高斯金字塔在简单降采样的基础上加上了高斯滤波。高斯金字塔上一组图像的初始图像(底层图像)是由前一组图像的倒数第三张图像隔点采样得到的。一组高斯金字塔如图~\ref{fig:gausspy}所示：
\begin{figure}[htp]
\centering
\includegraphics{gausspy}
\caption{图像的一组高斯金字塔}
\label{fig:gausspy}
\end{figure}

高斯金字塔是尺度空间的表示，sift算法是基于尺度空间理论的。尺度空间思想最早是由Iijima于1962年提出的，后经witkin和Koenderink等人的推广逐渐得到关注，在计算机视觉邻域使用广泛。尺度空间理论的基本思想是：在图像信息处理模型中引入一个被视为尺度的参数，通过连续变化尺度参数获得多尺度下的尺度空间表示序列，对这些序列进行尺度空间主轮廓的提取，并以该主轮廓作为一种特征向量，实现边缘、角点检测和不同分辨率上的特征提取等。尺度理论的数学表达式如公式~\ref{chidu}所示：
\begin{equation}\label{chidu}
L(x,y,\delta)=G(x,y,\delta)*I(x,y)
\end{equation}

其中，*表示卷积运算，G(x,y,$\delta$)为高斯函数，
\begin{equation}\label{gauss}
G(x,y,\delta)=\frac{1}{2\pi{\delta}^2}e^{-\frac{(x-m/2)^2+(y-n/2)^2}{2\delta^2}}
\end{equation}

其中，m和n表示高斯模板的维度，(x,y)代表图像的像素位置，$\delta$是尺度空间因子，值越小表示图像被平滑的越少，相应的尺度也就越小。大尺度对应于图像的概貌特征，小尺度对应于图像的细节特征。

\item 高斯差分金字塔建立\\高斯差分金子塔是在高斯金子塔的基础上的到得，通过将同一组中的相邻层数的高斯图像相减，可以得到高斯差分图像，具体如图~\ref{fig:gaussDog}所示：
\begin{figure}[htp]
\centering
\includegraphics{gaussDog}
\caption{高斯差分金子塔}
\label{fig:gaussDog}
\end{figure}

尺度归一化的高斯拉普拉斯函数${\delta}^2{\nabla}^2{G}$的极大值和极小值同其它的特征提取函数，例如：梯度，Hessian或Harris角特征比较，能够产生最稳定的图像特征。而高斯差分函数(Difference of Gaussian ，简称DOG算子)与尺度归一化的高斯拉普拉斯函数${\delta}^2{\nabla}^2{G}$，它们的关系推导如下：
\begin{equation}\label{dog_1}
\frac{\partial{x}}{\partial{\delta}}=\delta\nabla^2G
\end{equation}

利用差分近似代替微分，则有：
\begin{equation}\label{dog_2}
\delta\nabla^2G=\frac{\partial{x}}{\partial{\delta}}\approx\frac{G(x,y,k\delta)-G(x,y,\delta)}{k\delta-\delta}
\end{equation}

因此就有：
\begin{equation}\label{dog_3}
G(x,y,k\delta)-G(x,y,\delta)\approx(k-1)\delta^2\nabla^2G
\end{equation}

其中k-1是常数，并不影响极值点的位置求取，两者极值关系如图~\ref{fig:py_dog}所示，其中横坐标为0处，最下方的曲线为高斯差分算子，上方为高斯拉普拉斯算子：
\begin{figure}[htp]
\centering
\includegraphics{py_dog}
\caption{高斯拉普拉斯和高斯差分极值关系对比}
\label{fig:py_dog}
\end{figure}

当使用高斯差分算子代替拉普拉斯算子进行极值检测，公式如下所示：
\begin{equation}\label{dog_detect}
D(x,y,\delta)=\Bigl(G(x,y,k\delta)-G(x,y,\delta)\Bigr)*I(x,y)=L(x,y,k\delta)-L(x,y,\delta)
\end{equation}

在实际计算时，使用高斯金字塔每组中相邻上下两层图像相减，得到高斯差分图像，然后在差分图像上进行极点检测。
\item 极点检测\\关键点是由DOG空间的局部极值点组成的，关键点的初步探查是通过同一组内各DoG相邻两层图像之间比较完成的。为了寻找DoG函数的极值点，每一个像素点要和它所有的相邻点比较，看其是否比它的图像域和尺度域的相邻点大或者小。如图3.4所示，中间的检测点和它同尺度的8个相邻点和上下相邻尺度对应的9×2个点共26个点比较，以确保在尺度空间和二维图像空间都检测到极值点。具体如图~\ref{fig:pole_detect}所示：
\begin{figure}[htp]
\centering
\includegraphics{pole_detect}
\caption{高斯差分图像上的极点检测}
\label{fig:pole_detect}
\end{figure}

\item 关键点精确定位\\离散空间的极值点并不是真正的极值点，图~\ref{fig:keypoint_detect}显示了二维函数离散空间得到的极值点与连续空间极值点的差别。利用已知的离散空间点插值得到的连续空间极值点的方法叫做子像素插值（Sub-pixel Interpolation）。
\begin{figure}[htp]
\centering
\includegraphics{keypoint_detect}
\caption{离散空间与连续空间极值点的差别}
\label{fig:keypoint_detect}
\end{figure}

为了提高关键点的稳定性，需要对尺度空间DoG函数进行曲线拟合。利用DoG函数在尺度空间的Taylor展开式(拟合函数)如公式~\ref{Tayor}，其中$X={(x,y,\delta)^T}$代表相对插值中心的偏移量，当它在任一维度上的偏移量大于0.5时（即x或y或$\delta$），意味着插值中心已经偏移到它的邻近点上，所以必须改变当前关键点的位置，同时在新的位置上反复插值直到收敛，但是此过程有可能超出设定测迭代次数或者图像边界范围，那么这样的点就应该被删除掉，在Lowe的论文中，迭代的上限为5。另外，${|D(x)|}$的值过小会受到噪声影响而变得不稳定，因此该值小于某个阈值的极值点也要删除，在Lowe论文中，使用阈值的大小为0.03。
\begin{equation}\label{Tayor}
D(X)=D+\frac{\partial{D}^T}{\partial{X}}X+\frac{1}{2}X^T\frac{\partial^2{D}}{\partial{X}^2}X
\end{equation}

\item 关键点方向分配和描述\\为了使描述符具有旋转不变性，需要利用图像的局部特征为给每一个关键点分配一个基准方向。使用图像梯度的方法求取局部结构的稳定方向。对于在DOG金字塔中检测出的关键点点，采集其所在高斯金字塔图像3σ邻域窗口内像素的梯度和方向分布特征。梯度的模值和方向如下：
\begin{equation}\label{mozhi}
m(x,y)=\sqrt{L(x+1,y)-{L(x-1,y)}^2+L(x,y+1)-{L(x,y-1)}^2}
\end{equation}
\begin{equation}\label{fangxiang}
\theta(x,y)=\tan^{-1}\Bigl({\frac{L(x,y+1)-L(x,y-1)}{L(x+1,y-L(x-1,y)}}\Bigr)
\end{equation}
\end{compactenum}

其中,L为关键点所在尺度的空间值，邻域窗口半径为3*1.5${\delta}$。

在完成关键点的梯度计算后，使用直方图统计邻域内像素的梯度和方向。梯度直方图将0~360度的方向范围分为36个柱(bins)，其中每柱10度。如图~\ref{fig:direct_histogram}所示，直方图的峰值方向代表了关键点的主方向，(为简化，图中只画了八个方向的直方图)。方向直方图的峰值则代表了该特征点处邻域梯度的方向，以直方图中最大值作为该关键点的主方向。为了增强匹配的鲁棒性，只保留峰值大于主方向峰值80％的方向作为该关键点的辅方向。因此，对于同一梯度值的多个峰值的关键点位置，在相同位置和尺度将会有多个关键点被创建但方向不同。仅有15％的关键点被赋予多个方向，但可以明显的提高关键点匹配的稳定性。
\begin{figure}[htp]
\centering
\includegraphics{direct_histogram}
\caption{关键点方向直方图}
\label{fig:direct_histogram}
\end{figure}

在关键点方向被确定之后，我们需要给这些关键点建立一个定量的描述，该描述子不仅包括关键点的信息，也包含关键点周围对其有贡献的像素点，并且描述符应该有较高的独特性，以便于提高特征点正确匹配的概率。SIFT算法中通过一组向量将关键点的特征描述出来，SIFT描述子是关键点邻域高斯图像梯度统计结果的一种表示。通过对关键点周围图像区域分块，计算块内梯度直方图，生成具有独特性的向量，这个向量是该区域图像信息的一种抽象，具有唯一性。

Lowe在论文中建议使用在关键点尺度空间内4*4的窗口中计算的8个方向的梯度信息，共4*4*8=128维向量表征，具体表示步骤如下：
\begin{itemize}
\item 确定计算描述子所需的图像区域
\item 将坐标轴旋转为关键点的方向，以确保旋转不变性
\item 将邻域内的采样点分配到对应的子区域内，将子区域内的梯度值分配到8个方向上，计算其权值
\item 插值计算每个种子点八个方向的梯度
\item 描述子向量门限
\item 按特征点的尺度对特征描述向量进行排序
\end{itemize}

至此，SIFT特征描述向量生成完毕。

在上述5个步骤中，构建高斯金字塔和极点检测是最为耗时的两个。构建高斯金字塔时需要对每张图片进行高斯滤波，高斯滤波是一个时间复杂度为O(N3) 的操作，这里的N与图像大小成正比。图~\ref{fig:gausspy}中仅显示了一组金字塔，而SIFT算法往往需要构建多组金字塔，使得构建高斯金字塔的时间复杂度达到O(O*I*N3)，其中O为高斯塔的组数，I为高斯塔的层数。极点检测则是在整个金字塔组上进行的，相当于在一个维度为4的空间（组，层，长，宽）中搜索极值点，它的时间复杂度为O(O*I*N2)。SIFT算法流程中既包含高斯滤波和图像缩放等通用性较强的操作，也含有构建高斯（查分）金字塔、极点检测、消除边缘响应等通用性较差的操作。它的空间复杂度和时间复杂度都比较高，当有海量的图片需要进行特征提取时，占用内存较多，所需的处理时间也会很长。这也是我们使用Spark去加速SIFT算法的原因。

只有充分理解SIFT算法原理之后，才能比较好的在Spark上实现大规模特征提取工作。

\section{Spark核心技术原理}
在这一小节中，将会对Spark中三个核心技术原理进行分析，它们分别是内存编程原理，任务调度原理，性能优化。这三个技术在本文的设计起非常重要的地位，只有将这些技术理解透彻后，才能自如的解决开发过程中遇到的问题。
\subsection{Spark内存编程原理}
Spark区别于其他的大数据处理框架，比如Hadoop,在于它是一个内存计算的大数据处理框架，它可以将处理的中间结果保存在内存中，后续的计算可以在此基础上直接运行，提升了执行的效率。那么，这么多的数据保存在内存中，这就必须基于分布式内存的数据结构抽象，让开发人员基于该数据结构进行操作，只要操作这些数据，它们就是位于集群的内存中的。上面说的内存抽象数据结构就是RDD(Resilient Distributed Dataset弹性分布式数据集)，RDD是Spark最核心的概念，接下来将从RDD的底层实现原理，RDD的操作类型，RDD的缓存原理，RDD 的依赖关系和DAG的生成这几方面分析RDD。
\subsubsection{RDD的底层实现原理}
RDD的基本单元是分区(Partition)，一个RDD由多个分区组成，每个分区都会被逻辑映射成一个Block，一个Block会被一个Task执行，这些Block由BlockManager管理，BlockManager负责管理这些Block在集群内的分布。整个过程如图~\ref{fig:blockmanager}所示：
\begin{figure}[htp]
\centering
\includegraphics{blockmanager}
\caption{RDD Partition的存储和计算模型}
\label{fig:blockmanager}
\end{figure}

\subsubsection{RDD的操作类型}
RDD提供的操作可以分为两种类型，分别是transformtion(转换)和action(动作)，表\ref{tab:trans}和表\ref{tab:action}分别列出了常用的转换操作和动作操作。所有的转换操作都是惰性的，被调用时，它们不会直接计算结果，它们只是记住上一个转换动作，当一个动作操作被调用时，这些转换操作才会被执行。这种设计会让Spark运行得更加高效率，因为可能在动作操作时，被操作的数据集会变得比较小。
\begin{table}[h] %开始一个表格environment，表格的位置是h,here。
\caption{RDD转换操作} %显示表格的标题
\centering
\label{tab:trans}
\begin{tabular}{p{6cm}|p{8cm}} %设置了每一列的宽度，强制转换。
\hline
\hline
转换  & 含义 \\ %用&来分隔单元格的内容 \\表示进入下一行
\hline %画一个横线，下面的就都是一样了，这里一共有4行内容
map(func)  & 返回一个新的分布式的数据集，该数据集有每一个输入元素经过func函数转换后组成\\
\hline
filter(func)  & 返回一个新的数据集，该数据集经过func函数计算后返回值为true的输入元素组成\\
\hline
flatMap(func)  & 类似于Map，但是每一个输入元素可以被映射为0个或者是多个输出元素\\
\hline
mapPartitions(func) & 类型于map,但是独立在RDD的每一个分片上运行，因此func的类型必须是Iterator[T]=>Iterator[U]\\
\hline
mapPartitionWithSplit(func) & 类似于mapPartitions，但是func带有一个整型参数表示分片的索引值，func的函数类型为(Int,Iterator[T])=>Iterator[U]\\
\hline
sample(withReplacement,fraction,seed) & 根据fraction指定比例对数据进行采用\\
\hline
union(otherDataset) & 返回一个新的数据集，新数据集是由源数据集和参数数据集联合而成的\\
\hline
distinct(numTasks) & 返回一个包含源数据集中所有不重复的元素的新的数据集\\
\hline
\hline
\end{tabular}
\end{table}

\begin{table}[h] %开始一个表格environment，表格的位置是h,here。
\caption{RDD动作操作} %显示表格的标题
\centering
\label{tab:action}
\begin{tabular}{p{6cm}|p{8cm}} %设置了每一列的宽度，强制转换。
\hline
\hline
动作  & 含义 \\ %用&来分隔单元格的内容 \\表示进入下一行
\hline %画一个横线，下面的就都是一样了，这里一共有4行内容
reduce(func)  & 通过函数func聚集数据集中的所有元素\\
\hline
collect()  & 在驱动程序中，以数组的形式返回数据集中的所有元素。通常在使用filter或者其他操作返回一个足够小的数据子集后再使用比较有用\\
\hline
count()  & 返回数据集的个数\\
\hline
first() & 返回数据集的第一个元素\\
\hline
take(n) & 返回一个由数据集的前n个元素组成的数组\\
\hline
takeSample(withReplacement,num,seed) & 返回一个数组，该数组由从数据集中随机采用的num个元素组成\\
\hline
saveAsTextFile(path) & 将数据集的元素以textFile的形式保存到本地文件系统，HDFS或者任何Hadoop支持的文件系统\\
\hline
saveAsSequenceFile(path) & 将数据集的元素以Hadoop sequencefile的格式保存到指定目录下，可以是本地系统，HDFS或者任何Hadoop支持的文件系统\\
\hline
countByKey() & 对（K,V）类型的RDD有效，返回一个（K,Int）对的map，表示每一个key的元素个数\\
\hline
foreach(func) & 在数据集的每一个元素上，运行函数func进行更新\\
\hline
\hline
\end{tabular}
\end{table}

\subsubsection{RDD的缓存原理}
spark速度非常快的原因之一，就是在不同操作中内存中持久化（或缓存）一个数据集。当持久化一个RDD后，每一个节点都将会把计算分片的结果保存在内存中，后续的其他操作可以直接使用该结果，这就使得后续的动作变得十分迅速。

通过persist()或cache()方法可以标识一个要被持久化的RDD，一旦首次被触发后，该RDD将会被保留在计算节点的内存中并重用。persist()和cache()的实现如下：
\begin{lstlisting}[language=Java,numbers=none,frame=none]
/**Persist this RDD with the default storage level('MEMORY_ONLY').*/
def persist(): this.type = persist(StorageLevel.MEMORY_ONLY)
/**Persist this RDD with the default storage level('MEMORY_ONLY').*/
def cache(): this.type = persist()
\end{lstlisting}

假设首先进行了RDD0$\rightarrow$RDD1$\rightarrow$RDD2的计算作业，如果RDD1已经被缓存在内存中，那么后续在进行RDD0$\rightarrow$RDD1$\rightarrow$RDD3的计算作业时，就不需要从头开始，直接从RDD1往下执行作业即可，因此计算速度得到了很大的提升，具体过程如下图\ref{fig:rdd_cache}所示：
\begin{figure}[htp]
\centering
\includegraphics{rdd_cache}
\caption{RDD 缓存加速原理}
\label{fig:rdd_cache}
\end{figure}

缓存的rdd有可能会丢失，或者因为内存不足而删除，但是rdd有完整的容错机制，保证在rdd丢失或者删除的情况下计算依然可以正确执行。
\subsubsection{RDD的依赖关系和DAG的生成}
一个Spark应用中，不同的RDD间存在依赖关系，依赖关系分为窄依赖(narrow dependency)和宽依赖(wide dependency)，窄依赖和宽依赖的定义如下：
\begin{itemize}
\item 窄依赖，窄依赖是指父RDD的每个分区只被子RDD的一个分区所使用，如图\ref{fig:dependency}左边部分显示
\item 宽依赖，宽依赖是指父RDD的每个分区都可能被多个子RDD分区所使用，如图\ref{fig:dependency}右边部分显示
\end{itemize}
\begin{figure}[htp]
\centering
\includegraphics{dependency}
\caption{RDD窄依赖和宽依赖对比}
\label{fig:dependency}
\end{figure}
在Spark应用开发中，RDD会经过很多转换操作，每个转换操作都会生成一个新的RDD，这些转换操作最后会形成一个有向图（Directed Acyclic Graph，简称DAG）。这个DAG记录着RDD间的依赖关系，借助这些依赖关系，能保证一个RDD被计算前，所有它所依赖的parent RDD都已经完成了计算。同时Spark也是整个DAG根据依赖关系的不同划分为不同的阶段(stage)，一个stage中包含的一组并行执行的任务。划分stage的依据是，rdd间是窄依赖关系的划分到一个stage中，rdd间是宽依赖的划分到不同的stage中。一个stage中可以并行执行，不同stage间顺行执行。
\subsection{Spark任务调度原理}
Spark任务调度框架主要由三个模块支撑起，它们分别是DAGScheduler，SchedulerBackend及TaskScheduler。首先DAGScheduler分析用户提交的应用，根据依赖关系建立DAG，然后将DAG划分为不同的Stage，而stage中包含所要执行的tasks。SchedulerBackend负责整个集群交互，收集可用的资源信息，然后将这些信息上报TaskScheduler。TaskScheduler将从SchedulerBackend获取到的资源信息以及从DAGScheduler生成的tasks进行一个资源的分配，将tasks分配的合适的资源上面。整个流程如图\ref{fig:schedulerfw}所示：
\begin{figure}[htp]
\centering
\includegraphics{schedulerfw}
\caption{Spark任务调度框架}
\label{fig:schedulerfw}
\end{figure}
\subsubsection{DAGScheduler}
DAGScheduler面向stage的调度(stage-oriented scheduling)的高级调度器，将job根据类型划分为不同的stage(划分的依据是依赖关系为窄依赖的属于一个stage，依赖关系为宽依赖的RDD属于不同的stage)为每个job 的不同stage 计算DAG，跟踪哪些RDD和stage被物化并且发现运行job的最小的调度策略，然后并在每一个stage 内产生一系列的task 并封装为taskset, 结合当前的缓存情况来决定每个Task的最佳位置(任务在数据所在的节点上运行)，以taskset 为单位提交(submitTasks) 给TaskScheduler。
\subsubsection{SchedulerBackend}
SchedulerBackend负责与Cluster Manager交互，取得该Application分配到的资源，并且将这些资源传给TaskScheduler，由TaskScheduler为Task最终分配计算资源。在不同的集群模式下，SchedulerBackend的实现是不一样的，实现可以分为细粒度和粗粒度两种。分为细粒度和粗粒度两种。细粒度只有Mesos(mesos有粗细两种粒度的使用方式)实现了，粗粒度的实现者有yarn，mesos，standalone。拿standalone模式来说粗粒度，每台物理机器是一个worker，worker一共可以使用多少cpu和内存，启动时候可以指定每个worker起几个executor，即进程，每个executor的cpu和内存是多少。粗粒度与细粒度的主要区别，就是粗粒度是进程long-running 的，计算线程可以调到executor上跑，但executor的cpu和内存更容易浪费。细粒度的话，可以存在复用，可以实现抢占等等更加苛刻但促进资源利用率的事情。这俩概念还是AMPLab论文里最先提出来并在Mesos里实现的。AMPLab在资源使用粒度甚至任务分配最优的这块领域有不少论文，包括Mesos的DRF算法、Sparrow调度器等。所以standalone模式下，根据RDD的partition数，以及每个task需要的cpu数，可以很容易计算每台物理机器的负载量、资源的消耗情况、甚至知道TaskSet要分几批才能跑完一个stage。
\subsubsection{TaskScheduler}
TaskScheduler负责Application的不同Job间的调度，在Task执行失败时启动重试机制。TaskScheduler里会对已经提交的tasks进行一次优先级排序，这个排序策略目前有两种：FIFO(First In First Out,先进先出)或FAIR(公平调度)，默认调度策略是FIFO。通过排序，会得到一份待运行的tasks，然后就把从schedulerBackend交过来的worker资源信息合理分配给这些tasks。分配前，为了避免每次都是前几个worker被分到tasks，所以先对WorkerOffer列表进行一次随机洗牌。接下来就是遍历tasks，看workers的资源“够不够”，“符不符合”task，如果符合的话task就被正式launch起来。
\subsection{Spark性能优化原理}
在本小节中，将介绍Spark的性能优化原理，因为Spark是处理大数据的框架，因此性能优化是非常有必要的。接下来将从几个方面分析spark的性能问题
\subsection{调度和分区优化}
在spark应用程序中，会经常使用fiter算子进行数据过滤，而频繁的过滤或者过滤的数据量过大就会造成大量小分区，由于spark是每个数据分区都会分配一个任务执行，如果任务过多，就会造成线程切换开销很大，很多任务等待执行，并行度实际上不高，
\subsection{内存存储优化}
\subsection{网络传输优化}
\section{分布式存储原理}

\section{GPU特征提取和深度学习特征提取原理}

\section{本章小结}

\section{表格明细}
\label{sec:figure}
表格是论文的重要组成部分，我们从简单的表格讲起，到复杂的表格为止。

模板中关于表格的宏包有三个： \textsf{booktabs}、\textsf{array} 和
\textsf{longtabular}。三线表建议使用\textsf{booktabs}中提供的，
包含toprule、midrule 和 bottomrule三条命令，简单干脆！
它们与\textsf{longtable} 能很好的配合使用。下面来看一个表格实例：
\begin{table}[htb]
  \centering
  \begin{minipage}[t]{0.8\linewidth} % 如果想在表格中使用脚注，minipage是个不错的办法
  \caption[模板文件]{模板文件。如果表格的标题很长，那么在表格索引中就会很不美
    观，所以要像 chapter 那样在前面用中括号写一个简短的标题。这个标题会出现在索
    引中。}
  \label{tab:template-files}
    \begin{tabular*}{\linewidth}{lp{10cm}}
      \toprule[1.5pt]
      {\hei 文件名} & {\hei 描述} \\
      \midrule[1pt]
      nudtpaper.ins & \LaTeX{} 安装文件，docstrip\footnote{表格中的脚注} \\
      nudtpaper.dtx & 所有的一切都在这里面\footnote{再来一个}。\\
      nudtpaper.cls & 模板类文件。\\
      nudtpaper.cfg & 模板配置文。cls 和 cfg 由前两个文件生成。\\
      bstutf8.bst   & 参考文献 Bibtex 样式文件。\\
      mynudt.sty    & 常用的包和命令写在这里，减轻主文件的负担。\\
      \bottomrule[1.5pt]
    \end{tabular*}
  \end{minipage}
\end{table}

表 \ref{tab:template-files} 列举了本模板主要文件及其功能，基本上来说论文
中最可能用到的就是这种表格形式了。
请大家注意三线表中各条线对应的命令。这个例子还展示了如何在表格中正确使用脚注。
如果你不需要在表格中插入脚注，可以将minipage环境去掉。
由于\LaTeX{}本身不支持在表格中使用\verb|\footnote|，所以我们不得不将表格放在
小页中，而且最好将表格的宽度设置为小页的宽度，这样脚注看起来才更美观。

另外六院的同学在使用模板时需要使用一种固定宽度（往往是页宽，下面的例子由
rongdonghu提供）的表格，内容需要居中且可以自动调整。
解决办法是自定义了一种\verb|tabularx|中的\textbf{Z}环境，在论文模板中，
该命令已添加到\verb|mynudt.sty|中。下面是这种情况的实例：

\begin{table}[htbp]
\centering
\begin{minipage}[t]{0.9\linewidth}
\caption{Reed Solomon码的典型应用}
\label{tab:RSuse}
\begin{tabularx}{\linewidth}{cZ}
\toprule[1.5pt]
{\hei 应用领域} & {\hei 编码方案}\\
\midrule[1pt]
磁盘驱动器 & RS(32,28,5)码 \footnote{码长为32、维数为28、最小距离为5} \\
CD & 交叉交织RS码(CIRC) \\
DVD & RS(208,192,17)码、RS(182,172,11)码 \\
光纤通信 & RS(255,229,17)码 \\
\bottomrule[1.5pt]
\end{tabularx}
\end{minipage}
\end{table}

我们经常会在表格下方标注数据来源，或者对表格里面的条目进行解释。前面的脚注是一种
不错的方法，如果你不喜欢minipage方法的脚注。
那么完全可以在表格后面自己写注释，比如表~\ref{tab:tabexamp1}。
\begin{table}[htbp]
  \centering
  \caption{复杂表格示例 1}
  \label{tab:tabexamp1}
  \begin{minipage}[t]{0.8\textwidth}
    \begin{tabularx}{\linewidth}{|l|X|X|X|X|}
      \hline
      \multirow{2}*{\backslashbox{x}{y}}  & \multicolumn{2}{c|}{First Half} & \multicolumn{2}{c|}{Second Half}\\
      \cline{2-5}
      & 1st Qtr &2nd Qtr&3rd Qtr&4th Qtr \\
      \hline
      \multirow{2}*{East$^{*}$} &   20.4&   27.4&   90&     20.4 \\
       &   30.6 &   38.6 &   34.6 &  31.6 \\
      West$^{**}$ &   30.6 &   38.6 &   34.6 &  31.6 \\
      \hline
    \end{tabularx}\\[2pt]
    \footnotesize
    *：东部\\
    **：西部
  \end{minipage}
\end{table}

此外，表~\ref{tab:tabexamp1} 同时还演示了另外三个功能：1）通过 \textsf{tabularx} 的
 \texttt{|X|} 扩展实现表格内容自动调整；2）通过命令 \verb|\backslashbox| 在表头部分
插入反斜线（WORD中很简单，但\LaTeX{}做表格需要一定的（极大的）想象力）；3）就是
使用\verb|multirow|和\verb|multicolumn|命令。

不可否认 \LaTeX{} 的表格功能没有想象中的那么强大，不过只要你足够认真，足够细致，那么
同样可以排出来非常复杂非常漂亮的表格。可是科技论文中那么复杂表格有什么用呢？
上面那个表格就够用啦。

浮动体的并排放置一般有两种情况：1）二者没有关系，为两个独立的浮动体；2）二者隶属
于同一个浮动体。对表格来说并排表格既可以像表~\ref{tab:parallel1}、表~\ref{tab:parallel2}
使用小页环境，也可以如表~\ref{tab:subtable}使用子表格来做。
图与表同出一源，后面我们将讲解子图(subfloat)的例子。
\begin{table}[htb]
\centering
\noindent\begin{minipage}{0.45\textwidth}
\centering
\caption{第一个并排子表格}
\label{tab:parallel1}
\begin{tabular}{p{2cm}p{2cm}}
\toprule[1.5pt]
111 & 222 \\\midrule[1pt]
222 & 333 \\\bottomrule[1.5pt]
\end{tabular}
\end{minipage}
\begin{minipage}{0.45\textwidth}
\centering
\caption{第二个并排子表格}
\label{tab:parallel2}
\begin{tabular}{p{2cm}p{2cm}}
\toprule[1.5pt]
111 & 222 \\\midrule[1pt]
222 & 333 \\\bottomrule[1.5pt]
\end{tabular}
\end{minipage}
\end{table}
\begin{table}[htbp]
\centering
\caption{并排子表格}
\label{tab:subtable}
\subfloat[第一个子表格]{
\begin{tabular}{p{2cm}p{2cm}}
\toprule[1.5pt]
111 & 222 \\\midrule[1pt]
222 & 333 \\\bottomrule[1.5pt]
\end{tabular}}\hskip2cm
\subfloat[第二个子表格]{
\begin{tabular}{p{2cm}p{2cm}}
\toprule[1.5pt]
111 & 222 \\\midrule[1pt]
222 & 333 \\\bottomrule[1.5pt]
\end{tabular}}
\end{table}

如果您要排版的表格长度超过一页，那么推荐使用\textsf{longtable}命令。
这里随便敲入一些无关的文字，使得正文看上去不是那么的少。
表~\ref{tab:performance} 就是 \textsf{longtable} 的简单示例。
\begin{longtable}[c]{c*{6}{r}}
\caption{实验数据}\label{tab:performance}\\
\toprule[1.5pt]
 测试程序 & \multicolumn{1}{c}{正常运行} & \multicolumn{1}{c}{同步}
& \multicolumn{1}{c}{检查点}   & \multicolumn{1}{c}{卷回恢复}
& \multicolumn{1}{c}{进程迁移} & \multicolumn{1}{c}{检查点} 	\\
& \multicolumn{1}{c}{时间 (s)} & \multicolumn{1}{c}{时间 (s)}
& \multicolumn{1}{c}{时间 (s)} & \multicolumn{1}{c}{时间 (s)}
& \multicolumn{1}{c}{时间 (s)} &  文件（KB）			\\
\midrule[1pt]%
\endfirsthead%

\multicolumn{7}{c}{续表~\thetable\hskip1em 实验数据}\\

\toprule[1.5pt]
 测试程序 & \multicolumn{1}{c}{正常运行} & \multicolumn{1}{c}{同步}
& \multicolumn{1}{c}{检查点}   & \multicolumn{1}{c}{卷回恢复}
& \multicolumn{1}{c}{进程迁移} & \multicolumn{1}{c}{检查点} 	\\
& \multicolumn{1}{c}{时间 (s)} & \multicolumn{1}{c}{时间 (s)}
& \multicolumn{1}{c}{时间 (s)} & \multicolumn{1}{c}{时间 (s)}
& \multicolumn{1}{c}{时间 (s)} &  文件（KB）			\\
\midrule[1pt]%
\endhead%
\hline%

\multicolumn{7}{r}{续下页}%

\endfoot%
\endlastfoot%
CG.A.2 & 23.05   & 0.002 & 0.116 & 0.035 & 0.589 & 32491  \\
CG.A.4 & 15.06   & 0.003 & 0.067 & 0.021 & 0.351 & 18211  \\
CG.A.8 & 13.38   & 0.004 & 0.072 & 0.023 & 0.210 & 9890   \\
CG.B.2 & 867.45  & 0.002 & 0.864 & 0.232 & 3.256 & 228562 \\
CG.B.4 & 501.61  & 0.003 & 0.438 & 0.136 & 2.075 & 123862 \\
CG.B.8 & 384.65  & 0.004 & 0.457 & 0.108 & 1.235 & 63777  \\
MG.A.2 & 112.27  & 0.002 & 0.846 & 0.237 & 3.930 & 236473 \\
MG.A.4 & 59.84   & 0.003 & 0.442 & 0.128 & 2.070 & 123875 \\
MG.A.8 & 31.38   & 0.003 & 0.476 & 0.114 & 1.041 & 60627  \\
MG.B.2 & 526.28  & 0.002 & 0.821 & 0.238 & 4.176 & 236635 \\
MG.B.4 & 280.11  & 0.003 & 0.432 & 0.130 & 1.706 & 123793 \\
MG.B.8 & 148.29  & 0.003 & 0.442 & 0.116 & 0.893 & 60600  \\
LU.A.2 & 2116.54 & 0.002 & 0.110 & 0.030 & 0.532 & 28754  \\
LU.A.4 & 1102.50 & 0.002 & 0.069 & 0.017 & 0.255 & 14915  \\
LU.A.8 & 574.47  & 0.003 & 0.067 & 0.016 & 0.192 & 8655   \\
LU.B.2 & 9712.87 & 0.002 & 0.357 & 0.104 & 1.734 & 101975 \\
LU.B.4 & 4757.80 & 0.003 & 0.190 & 0.056 & 0.808 & 53522  \\
LU.B.8 & 2444.05 & 0.004 & 0.222 & 0.057 & 0.548 & 30134  \\
EP.A.2 & 123.81  & 0.002 & 0.010 & 0.003 & 0.074 & 1834   \\
EP.A.4 & 61.92   & 0.003 & 0.011 & 0.004 & 0.073 & 1743   \\
EP.A.8 & 31.06   & 0.004 & 0.017 & 0.005 & 0.073 & 1661   \\
EP.B.2 & 495.49  & 0.001 & 0.009 & 0.003 & 0.196 & 2011   \\
EP.B.4 & 247.69  & 0.002 & 0.012 & 0.004 & 0.122 & 1663   \\
EP.B.8 & 126.74  & 0.003 & 0.017 & 0.005 & 0.083 & 1656   \\
\bottomrule[1.5pt]
\end{longtable}

另外，有的同学不想让某个表格或者图片出现在索引里面，那么请使用命令 \verb|\caption*{}|，
这个命令不会给表格编号，也就是出来的只有标题文字而没有“表~XX”，“图~XX”，否则
索引里面序号{\kai 不连续}就显得不伦不类，这也是 \LaTeX{} 里星号命令默认的规则。

\section{绘图插图}

本模板不再预先装载任何绘图包（如 \textsf{pstricks，pgf} 等），完全由你自己来决定。
个人觉得 \textsf{pgf} 不错，不依赖于 Postscript。此外还有很多针对 \LaTeX{} 的
 GUI 作图工具，如 XFig(jFig), WinFig, Tpx, Ipe, Dia, Inkscape, LaTeXPiX,
jPicEdt 等等。本人强烈推荐\textsf{Ipe}。

一般图形都是处在浮动环境中。之所以称为浮动是指最终排版效果图形的位置不一定与源文
件中的位置对应，这也是刚使用 \LaTeX{} 同学可能遇到的问题。
如果要强制固定浮动图形的位置，请使用 \textsf{float} 宏包，
它提供了 \texttt{[H]}（意思是图片就给我放在这里\textcolor{red}{H}ere）参数，
但是除非特别需要，不建议使用\texttt{[H]}，而是推荐使用\texttt{[htbp]}，
给\LaTeX{}更多选择。比如图~\ref{fig:ipe}。
\begin{figure}[htbp] % use float package if you want it here
  \centering
  \includegraphics[width=3in]{hello}
  \caption{利用IPE制图}
  \label{fig:ipe}
\end{figure}

若子图共用一个计数器，
那么请看图~\ref{fig:big1}，它包含两个小图，分别是图~\ref{fig:subfig1}
和图~\ref{fig:subfig2}。这里推荐使用\verb|\subfloat|，{\bf 不要再用}
\verb|\subfigure|和\verb|\subtable|。
\begin{figure}[htb]
  \centering%
  \subfloat[第一个小图形]{%
    \label{fig:subfig1}
    \includegraphics[height=2cm]{xh}}\hspace{4em}%
  \subfloat[第二个小图形。如果标题很长的话，它会自动换行，这个 caption 就是这样的例子]{%
    \label{fig:subfig2}
    \includegraphics[height=2cm]{xhh}}
  \caption{包含子图形的大图形}
  \label{fig:big1}
\end{figure}

而下面这个例子显示并排$3\times2$的图片，见图\ref{fig:subfig:3x2}:
\begin{figure}[htb]
\centering
\subfloat[]{\includegraphics[width=.27\textwidth]{typography}} \qquad
\subfloat[]{\includegraphics[width=.27\textwidth]{typography}} \qquad
\subfloat[]{\includegraphics[width=.27\textwidth]{typography}} \qquad
\subfloat[]{\includegraphics[width=.27\textwidth]{typography}} \qquad
\subfloat[]{\includegraphics[width=.27\textwidth]{typography}} \qquad
\subfloat[]{\includegraphics[width=.27\textwidth]{typography}}
\caption{并排图片}
\label{fig:subfig:3x2}
\end{figure}

要注意，图\ref{fig:subfig:3x2}例中
\texttt{qquad}相当于\verb|\hspace{2em}|，也就是2个字符的宽度，约0.08倍页宽，
图片宽度设定为0.27倍页宽是合适的；在该环境中，尽量不要手动换行，所以，不妨自己计算一下！

如果要把编号的两个图形并排，那么小页(minipage)就非常有用了，可以分别参考
图\ref{fig:parallel1}和图\ref{fig:parallel2}。其实这个例子和表格一节中并排
放置的表格一摸一样。
\begin{figure}[htb]
\begin{minipage}{0.48\textwidth}
  \centering
  \includegraphics[height=1.2cm]{xhh}
  \caption{并排第一个图}
  \label{fig:parallel1}
\end{minipage}\hfill
\begin{minipage}{0.48\textwidth}
  \centering
  \includegraphics[height=1.2cm]{xhh}
  \caption{并排第二个图}
  \label{fig:parallel2}
\end{minipage}
\end{figure}

图形就说这么多，因为大家在写论文是遇到的最大问题不是怎么把图插进去，
而是怎样做出专业的、诡异的、震撼的图片来，记得在这时参考前面推荐的那
些工具吧，当然必不可少的是Matlab了，至于如何加入中文标注、支持中文等等
可以上网去查，但这里{\kai 推荐一点}，用好export命令，使得插入图片时尽可能的不要
缩放，保证图文的一致性。

\section{公式定理}
\label{sec:equation}
贝叶斯公式如式~(\ref{equ:chap1:bayes})，其中$p(y|\mathbf{x})$为后验；
$p(\mathbf{x})$为先验；分母$p(\mathbf{x})$ 为归一化因子，这是
实际应用中十分恐怖的一个积分式。
\begin{equation}
\label{equ:chap1:bayes}
p(y|\mathbf{x}) = \frac{p(\mathbf{x},y)}{p(\mathbf{x})}=
\frac{p(\mathbf{x}|y)p(y)}{p(\mathbf{x})}
\end{equation}

论文里面公式越多，\TeX{} 就越 happy。再看一个 \textsf{amsmath} 的例子：
\newcommand{\envert}[1]{\left\lvert#1\right\rvert}
\begin{equation}\label{detK2}
\det\mathbf{K}(t=1,t_1,\dots,t_n)=\sum_{I\in\mathbf{n}}(-1)^{\envert{I}}
\prod_{i\in I}t_i\prod_{j\in I}(D_j+\lambda_jt_j)\det\mathbf{A}
^{(\lambda)}(\overline{I}|\overline{I})=0.
\end{equation}

大家在写公式的时候一定要好好看\textsf{amsmath}的文档，并参考模板中的用法：
\begin{multline*}%\tag{[b]} % 这个出现在索引中的
\int_a^b\biggl\{\int_a^b[f(x)^2g(y)^2+f(y)^2g(x)^2]
 -2f(x)g(x)f(y)g(y)\,dx\biggr\}\,dy \\
 =\int_a^b\biggl\{g(y)^2\int_a^bf^2+f(y)^2
  \int_a^b g^2-2f(y)g(y)\int_a^b fg\biggr\}\,dy
\end{multline*}

再看\ref{equ:split}:
\begin{equation}\label{equ:split}
\begin{split}
C(z) &= [z^n] \biggl[\frac{e^{3/4}}{\sqrt{1-z}} +
e^{-3/4}(1-z)^{1/2} + \frac{e^{-3/4}}{4}(1-z)^{3/2}
+ O\Bigl( (1-z)^{5/2}\Bigr)\biggr] \\
&= \frac{e^{-3/4}}{\sqrt{\pi n}} - \frac{5e^{-3/4}}{8\sqrt{\pi
n^3}} + \frac{e^{-3/4}}{128 \sqrt{\pi n^5}} +
O\biggl(\frac{1}{\sqrt{\pi
n^7}}\biggr)
\end{split}
\end{equation}

当然了，数学中必不可少的是定理和证明：
\begin{theorem}
  \label{chapTSthm:rayleigh solution}
  假定 $X$ 的二阶矩存在:
  \begin{equation}
         O_R(\mathbf{x},F)=\sqrt{\frac{\mathbf{u}_1^T\mathbf{A}\mathbf{u}_1} {\mathbf{u}_1^T\mathbf{B}\mathbf{u}_1}}=\sqrt{\lambda_1},
  \end{equation}
  其中 $\mathbf{A}$ 等于 $(\mathbf{x}-EX)(\mathbf{x}-EX)^T$，$\mathbf{B}$ 表示协方差阵 $E(X-EX)(X-EX)^T$，$\lambda_1$
$\mathbf{u}_1$是$\lambda_1$对应的特征向量，
\end{theorem}

对于希腊符号使用\verb|mathbf|命令可能有些问题，所以建议对符号
用\verb|bm|加粗，记得用\verb|\up<greek>|切换正体符号，下面看几个例子：
\verb|\gamma|斜体代表变量$\gamma$，\verb|\bm{\upgamma}|正体代表向量$\bm{\upgamma}$,
。\verb|\Gamma|正体代表操作符号$\Gamma$，
\verb|\bm{\Gamma}|正体粗体代表矩阵形式$\bm{\Gamma}$，
\verb|\varGamma|斜体代表变量$\varGamma$。另外对于大小写斜体的加粗可以见$\bm{\gamma}$和$\bm{\varGamma}$，
但是这两种科技论文中很少出现，这里只做测试。
非符号普通向量就用\verb|\mathbf|吧：$\mathbf{x}_k,\mathbf{X}_k$。
完整测试如下$\omega,\bm{\omega},\upomega,\bm{\upomega},\Omega,\bm{\Omega},\varOmega,\bm{\varOmega}$。

\begin{proof}
上述优化问题显然是一个Rayleigh商问题。我们有
  \begin{align}
     O_R(\mathbf{x},F)=\sqrt{\frac{\mathbf{u}_1^T\mathbf{A}\mathbf{u}_1} {\mathbf{u}_1^T\mathbf{B}\mathbf{u}_1}}=\sqrt{\lambda_1},
 \end{align}
 其中 $\lambda_1$ 下列广义特征值问题的最大特征值：
$$
\mathbf{A}\mathbf{z}=\lambda\mathbf{B}\mathbf{z}, \mathbf{z}\neq 0.
$$
 $\mathbf{u}_1$ 是 $\lambda_1$对应的特征向量。结论成立。
\end{proof}

下面来看看算法环境的定义和使用。
我们知道，故障诊断的最终目的，是将故障定位到部件，而由于信号--部件依赖矩阵的存在，因此，实质性的工作是找出由故障部件发出异常信号，
不妨称为源异常信号，而如前所述，源异常信号与异常信号依赖矩阵$\mathbf{S_a}$的全零列是存在一一对应的关系的。因此，我们只要获得了$\mathbf{S_a}$的全零列的相关信息，
也就获得了源异常信号的信息，从而能进一步找到故障源。
通过以上分析，我们构造算法\ref{alg53}，用于实现非回路故障诊断。
\begin{algorithm}[htbp]
  \caption{非回路故障诊断算法}
  \label{alg53}
  \begin{algorithmic}[1]
    \REQUIRE 信号--部件依赖矩阵$\mathbf{A}$，信号依赖矩阵$\mathbf{S}$，信号状态向量$\alpha$
    \ENSURE 部件状态向量$\gamma$
    \STATE $\mathbf{P}\leftarrow\left(<\alpha>\right)$
    \STATE $\mathbf{S_{a}}\leftarrow\mathbf{P^T}\mathbf{S}\mathbf{P}$
    \FOR{$i=1$ to $S_a$的阶数$m$}
    \STATE $s_i\leftarrow s_i$的第$i$个行向量
    \ENDFOR
    \STATE $\beta_a\leftarrow\lnot \left(s_1\lor s_2\lor \cdots\lor s_m\right)^T$
    \STATE $\beta\leftarrow\mathbf{P}\beta_a$
    \STATE $\gamma\leftarrow\mathbf{A}\beta$
  \end{algorithmic}
\end{algorithm}

第一类故障回路推理与非回路故障推理是算法基本相同，稍微不同的是$\beta_a$的计算。因为第一类故障回路中的信号全部可能是源异常信号，因此我们不必计算
$\beta_a=\lnot \left(\left[s_1\lor s_2\lor \cdots\lor s_m\right]^T\right)$，而直接取$\beta_a=\underbrace{\left[\begin{array}{cccc}1&1&\cdots&1\end{array}\right]^T}_m$，将$\beta_a$代入
算法\ref{alg53}，有
\[\beta=\mathbf{P}\beta_a=\mathbf{P}\underbrace{\left[\begin{array}{cccc}1&1&\cdots&1\end{array}\right]^T}_m=\alpha\]
因此一类故障回路的推理算法变得相当简单，例如算法\ref{alg54}
\begin{algorithm}[htbp]
  \caption{第一类故障回路诊断算法}
  \label{alg54}
  \begin{algorithmic}[1]
    \REQUIRE 信号--部件依赖矩阵$\mathbf{A}$，信号状态向量$\alpha$
    \ENSURE 部件状态向量$\gamma$
    \STATE $\gamma\leftarrow\mathbf{A}\alpha$
  \end{algorithmic}
\end{algorithm}

\section{参考文献}
\label{sec:bib}
当然参考文献可以直接写 bibitem，虽然费点功夫，但是好控制，各种格式可以自己随意改
写，在nudtpaper里面，建议使用JabRef编辑和管理文献，再结合\verb|bstutf8.bst|，
对中文的支持非常不错，格式也很规范。

本模板推荐使用 BIB\TeX，样式文件为 bstutf8.bst，符合学校的参考文献格式（如专利
等引用未加详细测试）。看看这个例子，关于书的\upcite{tex, companion}，
还有这些\upcite{Krasnogor2004e, clzs, zjsw}，关于杂志的\upcite{ELIDRISSI94,
  MELLINGER96, SHELL02}，硕士论文\upcite{zhubajie, metamori2004}，博士论文
\upcite{shaheshang, FistSystem01}，标准文件\upcite{IEEE-1363}，会议论文\upcite{DPMG,kocher99}，%
技术报告\upcite{NPB2}。中文参考文献\upcite{cnarticle}\textsf{特别注意}，需要在\verb|bibitem|中
增加\verb|language|域并设为\verb|zh|，英文此项可不填，之后由\verb|bstutf8|统一处理
(具体就是决定一些文献在中英文不同环境下的显示格式，如等、etc)。
若使用\verb|JabRef|，则你可按下面步骤来设置：
选择\textsf{Options}$\rightarrow$\textsf{Set Up General Fields}，
在\verb|General:|后加入\verb|language|就可以了。

有时候不想要上标，那么可以这样 \cite{shaheshang}，这个非常重要。

\section{代码高亮}
有些时候我们需要在论文中引入一段代码，用来衬托正文的内容，或者体现关键思路的实现。
在模板中，统一使用\texttt{listings}宏包，并且设置了基本的内容格式，并建议用户只
使用三个接口，分别控制：编程语言，行号以及边框。简洁达意即可，下面分别举例说明。

首先是设定语言，来一个C的，使用的是默认设置：
\begin{lstlisting}[language=C]
void sort(int arr[], int beg, int end)
{
  if (end > beg + 1)
  {
    int piv = arr[beg], l = beg + 1, r = end;
    while (l < r)
    {
      if (arr[l] <= piv)
        l++;
      else
        swap(&arr[l], &arr[--r]);
    }
    swap(&arr[--l], &arr[beg]);
    sort(arr, beg, l);
    sort(arr, r, end);
  }
}
\end{lstlisting}

当我们需要高亮Java代码，不需要行号，不需要边框时，可以：
\begin{lstlisting}[language=Java,numbers=none,frame=none]
// A program to display the message
// "Hello World!" on standard output

public class HelloWorld {

   public static void main(String[] args) {
      System.out.println("Hello World!");
   }

}   // end of class HelloWorld
\end{lstlisting}

细心的用户可能发现，行号被放在了正文框之外，事实上这样是比较美观的，
如果有些用户希望在正文框架之内布置所有内容，可以：
\begin{lstlisting}[language=perl,xleftmargin=2em,framexleftmargin=1.5em]
#!/usr/bin/perl
print "Hello, world!\n";
\end{lstlisting}

好了，就这么多，\texttt{listings}宏包的功能很强大也很复杂，如果需要自己定制，
可以查看其手册，耐心阅读总会找到答案。
\textbf{注意:} 当前代码环境中文注释的处理还不是很完善，对于注释请妥善处理。
在本模板中，推荐算法环境或者去掉中文的listings代码环境。
如果需要包含中文注释，不要求代码高亮，
就用\texttt{code}环境，这个环境是Verbatim的定制版，简单有效，
调用的是fancyvbr宏包，用户可在mynudt.sty中修改它的外观等等。
这里我们还可以给代码加上标签。
\begin{code}[label=hello.c]
public class HelloWorld {
   public static void main(String[] args) {
      System.out.println("Hello World!");
   }
}   // 世界，你好！
\end{code}

\section{符号列表}

{\hei 前面的话：}{\kai\color{blue}
2.2版本后默认使用nomencl环境，如果你还是希望使用传统的\verb|definition.tex|，那么只需注释掉
顶层文件中的nomenclature即可。}

符号列表使用的是\verb|nomencl|包，自己简单定制了下，使用方法分为四步：
\begin{compactenum}
\item 将\verb|\makenomenclature|语句放在正文前，即\verb|\begin{document}|前面；
\item 将\verb|\printnomenclature|放在论文中，我在例子中将符号列表放在了英文摘要的
后面，正文第一章的前面，当然，你可以根据自己的需要或者教研室的规范放置在合理的位置上，
为了页面引用的正确，在这句话前面放上\verb|\cleardoublepage|；
\item 使用\verb|\nomenclature|命令在论文的各个位置上添加符号定义，语法后面会讲到；
\item 编译。编译需要首先运行一遍xelatex，之后运行
\begin{code}
makeindex -s nomencl.ist -o thesis.nls thesis.nlo
\end{code}
\end{compactenum}

你可以把这句编译命令放在\verb|makepdf.bat|中第一个\verb|xelatex thesis|下面。然后
双击\verb|makepdf.bat|就可以了，论文模板中已经为你添加上了，如果你强烈不想使用
nomencl环境，只要把它注释掉（前面加\verb|rem|）就可以。
另外，由于我使用的是VIM来编辑\TeX{}代码，具体到每个编辑器（诸如WinEDT，TeXWorks等）
如何设定该命令的快捷按钮，诸位可以搜索网上的教程。

下面简单说明下\verb|\nomenclature|命令，语法为。这里插入一些随机的文字，希望
对你在阅读帮助中的思维没有什么不良的影响。
\begin{code}
\nomenclature[<prefix>]{<symbol>}{<desc>}{<null>}
\end{code}
\verb|nomencl|模板的默认排序方法可能（大多都）不满足要求，
论文模板里，我们通过设定\verb|<prefix>|来实现符号列表的排序。
它分为两部分，比如如\verb|[Aa]|，第一个字母的含义是：
\begin{compactitem}
\item[`A'] 符号归为拉丁字母
\item[`G'] 希腊字母
\item[`X'] 上标
\item[`Z'] 下标
\end{compactitem}
每个标识后边的字幕\verb|a-z|作为当前符号组内的排列顺序，比如$\beta$就可以写成
\verb|[Gb]|，诸如此类。当然你一定注意到了，这个排序分组的设定只是为了记忆
方便，并不是强制的，因此你可以有自己的方案，比如Z是Greek，
R是Roman什么的，只要统一就好，只需记住，组间排列是按字母顺序排的。

注意符号表分四列，前三列的含义与命令中相同，
最后一列是符号定义时所在的页码。效果看例子，对于下式:
\begin{equation}\label{eq:heatflux}
   \dot{Q} = k \cdot A \cdot \Delta T
\end{equation}%
\nomenclature[Aq]{$\dot{Q}$}{heat flux}{}%
\nomenclature[Ak]{$k$}{overall heat transfer coefficient,式\eqref{eq:ohtc}}{}%
\nomenclature[Aa]{$A$}{area}{}%
\nomenclature[Al]{$L$}{length}{}%
\nomenclature[At]{$T$}{temperature}{}%
\nomenclature[At]{$\Delta T$}{temperature difference}{}%
\nomenclature[Gr]{$\gamma$}{中文测试, 以及一句很长的物理意义，很有可能超过当前栏的宽度，主要目的是看一看会不会出现某些异常情况。}{}%

或者:
\begin{equation}\label{eq:ohtc}
    \frac{1}{k} = \left[\frac{1}{\alpha _{\mathrm{i}}\,r_{\mathrm{i}}} +
    \sum^n_{j=1}\frac{1}{\lambda _j}\,
    \ln \frac{r_{\mathrm{a},j}}{r_{\mathrm{i},j}} +
    \frac{1}{\alpha _{\mathrm{a}}\,
    r_{\mathrm{a}}}\right] \cdot r_{\mathrm{reference}}
\end{equation}%
\nomenclature[Ga]{$\alpha$}{convection heat transfer coefficient}{}%
\nomenclature[Zi]{i}{in}{}%
\nomenclature[Gl]{$\lambda$}{thermal conductivity}{}%
\nomenclature[Za]{a}{out}{}%
\nomenclature[Zn]{$n$}{number of walls}{}%
\nomenclature[Zj]{$j$}{running parameter}{}%

{\hei 注意事项：}{\kai 模板中定制的nomencl格式在mynudt.sty中，默认是三栏的，分别是：
``符号''，``定义''，``首次出现页码''，
注意这里的符号列表都没有单位，如果你需要额外的栏输入单位（呵呵，聪明的读者可能看出来
了，\verb|nomenclature|命令最后一个是空的，就是用来让你赋予她各种意义的）。
此时就需要你有一点点动手能力了（其实只要会修改表格就行），
方法很简单，比如需要添加``国际单位制''这一栏，则
\begin{compactenum}
\item 论文中\verb|\nomenclature|命令的第三个参数就让他代表单位，也可留空；
\item 将\verb|mynudt.sty|中longtable的表头添加``国际单位制''几个字，
你也可以取其他的名字，放在那个{\kai 应该出现的}位置上；
\item 由于增加了5个字，就把前面栏的宽度数字减5，同时设定第三栏宽度为5，
注意这一步需要你自己调整，记得不要让表格超出边界就行。
\end{compactenum}
}

\section{中文习惯}
\label{sec:chinese}

对于itermize过大的行间距，用户可以使用compactitem环境来替代，但是模板中不进行默认替代，
因为只有用户真正发现列表不好看才会找到这里，而且在示例文件中，
陈赓大将那个列表环境如果压缩了行距会很不好看。谢谢ZhangLei的建议！

{\hei 一个重要的提示：}
作者自己的定义命令、包等，不要放在模板里面，请放到\verb|mynudt.sty|
中，这样模板时，只要覆盖\verb|nudtpaper.cls|即可。

中文破折号为一个两个字宽垂直居中的直线，输入法直接得到的破折号是两个断开的小短线
（——），这看起来不舒服。所以模板中定义了一个破折号的命令 \verb|\pozhehao|，请看：

厚德博学，强军兴国\hfill \pozhehao{}国防科大校训

